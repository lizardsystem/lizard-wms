[buildout]
index = http://packages.lizardsystem.nl
extends =
    http://packages.lizardsystem.nl/kgs/latest.cfg
extensions =
    mr.developer
show-picked-versions = true
parts =
    sysegg
    django
    omelette
    console_scripts
    sphinx
    pylint
    codeintel
develop = .
eggs =
    lizard-wms
    lizard-wms[test]

[versions]
# Required by:
# lizard-wms==1.9.dev0
GChartWrapper = 0.9
zc.buildout = 2.2.1
zc.recipe.egg = 2.0.0
# Specific pins
lizard-wms =
lizard-ui = 4.40
lizard-map = 4.40
lizard-maptree = 1.11
lizard-security = 0.7
Django = 1.6.5
django-nose = 1.2
djangorecipe = 1.10
django-extensions = 1.3.8
django-compressor = 1.4
django-jsonfield = 0.9.13
factory-boy = 2.4.1
nose = 1.3.3

[sysegg]
recipe = syseggrecipe
force-sysegg = true
eggs =
    psycopg2
    matplotlib


[django]
# Sets up django for testing our application.
# See http://jacobian.org/writing/django-apps-with-buildout/
recipe = djangorecipe
project = lizard_wms
projectegg = lizard_wms
settings = testsettings
test = lizard_wms
eggs =
    ${buildout:eggs}


[omelette]
# Creates a nice parts/omelette with our used eggs
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}


[console_scripts]
recipe = zc.recipe.egg
interpreter = python
dependent-scripts = true
eggs =
    ${buildout:eggs}
# Development tools
    createcoverage
    pep8
    pyflakes
    translations
    zest.releaser


[pylint]
recipe = zc.recipe.egg
eggs =
    pylint
    ${buildout:eggs}
scripts = pylint
entry-points = pylint=pylint.lint:Run
arguments = ['--output-format=parseable', '--reports=n']+sys.argv[1:]


[sphinx]
recipe = collective.recipe.sphinxbuilder
source = ${buildout:directory}/doc/source
build = ${buildout:directory}/doc/build
eggs = ${buildout:eggs}


[codeintel]
recipe = corneti.recipes.codeintel
eggs = ${django:eggs}
